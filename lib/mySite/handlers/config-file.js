// Generated by CoffeeScript 1.7.1
var ConfigFile, fs, grunt, path;

fs = require('fs');

path = require('path');

grunt = require('grunt');

module.exports.ConfigFile = ConfigFile = (function() {
  function ConfigFile(sitePayload, path, options) {
    this.sitePayload = sitePayload;
    this.path = path;
    this.options = options;
    this.payload = {
      site: this.sitePayload,
      file: null,
      options: this.options
    };
  }

  ConfigFile.prototype.init = function(callback) {
    return this.read(function(err, data) {
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      this.resolvePath();
      this.clean();
      return typeof callback === "function" ? callback() : void 0;
    });
  };

  ConfigFile.prototype.resolvePath = function(newPath) {
    if (newPath != null) {
      this.path = newPath;
    }
    this.path = path.relative(this.sitePayload.source, this.path);
    this.dirname = path.dirname(this.path);
    this.ext = path.extname(this.path);
    this.basename = path.basename(this.path, this.ext);
    this.fullpath = path.resolve(this.sitePayload.source, this.path);
    return this._calcURL();
  };

  ConfigFile.prototype._calcURL = function() {
    var url;
    url = this.options.permalink ? this.options.permalink : this.sitePayload.permalink_style === 'pretty' ? this.isIndex && this.isHTML ? "/" + this.dirname + "/" : "/" + this.path : "/" + this.path;
    this.url = url.split('/').filter(function(part) {
      return !part.match(/^\.+$/);
    }).join('/');
    if (url.match(/\/$/)) {
      return this.url += "/";
    }
  };

  ConfigFile.prototype.read = function(callback) {
    return fs.readFile(this.fullpath, function(err, data) {
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      try {
        this.data = JSON.parse(data);
        this.payload.file = this.data;
        this.payload.file = this.date = grunt.template.process(this.data, this.payload);
        return typeof callback === "function" ? callback(null, this.data) : void 0;
      } catch (_error) {
        err = _error;
        return typeof callback === "function" ? callback(err) : void 0;
      }
    });
  };

  ConfigFile.prototype.clean = function() {};

  return ConfigFile;

})();

//# sourceMappingURL=config-file.map
