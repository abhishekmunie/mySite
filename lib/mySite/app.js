// Generated by CoffeeScript 1.7.1
var App, bodyParser, cachelicious, cacheliciousConnect, cookieParser, express, favicon, fs, http, logger, path, url, zlib;

fs = require('fs');

url = require('url');

path = require('path');

http = require('http');

zlib = require('zlib');

express = require('express');

favicon = require('static-favicon');

logger = require('morgan');

cookieParser = require('cookie-parser');

bodyParser = require('body-parser');

cachelicious = require('cachelicious');

cacheliciousConnect = cachelicious.connect;

module.exports.App = App = (function() {
  function App(config) {
    this.config = config;
    console.log(this.config.static_file.source);
    this.app = express();
    this.app.set('env', this.config.env);
    this.debug = require('debug')('mySite-server');
    this.staticCache = cacheliciousConnect(this.config.static_file.source, {
      maxCacheSize: this.config.static_file.cache_size
    });
  }

  App.prototype.setPageHandler = function(pageHandler) {
    this.pageHandler = pageHandler;
  };

  App.prototype.setProxyHandler = function(url, proxyHandler) {
    return this.app.use(url, proxyHandler);
  };

  App.prototype.configure = function() {
    this.app.use(favicon());
    if (this.app.get('env') === 'development') {
      this.app.use(logger({
        immediate: true,
        format: 'dev'
      }));
    }
    this.app.use(cookieParser(this.config.cookie_secret));
    this.app.use(bodyParser.json());
    this.app.use(bodyParser.urlencoded());
    if (this.config.session.type === 'express') {
      this.app.use(require('express-session')(this.config.session.config));
    }
    if (this.config.trust_proxy) {
      this.app.enable('trust proxy');
    }
    if (this.config.force_https.enable === true) {
      this.app.use(function(req, res, next) {
        var _ref;
        if (!(req.secure || req.headers['x-forwarded-proto'] === 'https')) {
          return res.redirect(301, (this.config.force_https.host || req.headers.host) + req.path);
        }
        res.set({
          'Strict-Transport-Security': "max-age=" + this.config.force_https.maxAge + ((_ref = this.config.force_https.includeSubdomains) != null ? _ref : {
            "; includeSubDomains": ""
          })
        });
        res.removeHeader('X-Powered-By');
        return next();
      });
    }
    if (this.config.uncapitalize) {
      this.app.use(require('express-uncapitalize')());
    }
    this.app.use((function(_this) {
      return function(req, res, next) {
        _this.debug("Checking static cache for " + req.url);
        if (req.url[1] === '_' || /^\/(.*\/_.*|node_modules\/.*|package.json|Procfile|vendor\/.*)$/.test(req.url)) {
          return next();
        }
        return _this.staticCache.apply(_this, arguments);
      };
    })(this));
    this.app.use(function(req, res, next) {
      var err;
      err = new Error('Not Found');
      err.status = 404;
      return next(err);
    });
    this.app.use(function(err, req, res, next) {
      return console.error(err);
    });
    if (this.app.get('env') === 'production') {
      return this.app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        if (req.xhr) {
          return res.send({
            error: 'Something blew up!'
          });
        } else {
          return res.send('Something blew up!');
        }
      });
    } else if (this.app.get('env') === 'development') {
      return this.app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        if (req.xhr) {
          return res.send({
            message: err.message,
            error: err
          });
        } else {
          res.send('Something blew up!');
          return res.send(err);
        }
      });
    }
  };

  App.prototype.start = function(callback) {
    return this.server = http.createServer(this.app).listen(this.config.port, (function(_this) {
      return function() {
        var address;
        address = _this.server.address();
        return typeof callback === "function" ? callback(address) : void 0;
      };
    })(this));
  };

  return App;

})();

//# sourceMappingURL=app.map
