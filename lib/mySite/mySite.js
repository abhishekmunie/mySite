// Generated by CoffeeScript 1.7.1
var Site, app, async, coffee, configConvict, data_source, debug, fs, grunt, nvcr, page, path, pc, prc, proxy, rc, redirect, util, _, __;

fs = require('fs');

path = require('path');

_ = require('lodash');

grunt = require('grunt');

coffee = require('coffee-script');

async = require('async');

util = require('util');

__ = require('./helper');

app = require('./app');

page = require('./handlers/page');

proxy = require('./handlers/proxy');

redirect = require('./handlers/redirect');

data_source = require('./data-source');

module.exports.VERSION = '0.11.2';

module.exports.configConvict = configConvict = require('./config');

pc = rc = prc = 0;

if (process.env["NODE_ENV"] === 'development') {
  nvcr = require('nock-vcr');
  nvcr.insertCassette('requestCache');
  process.on('exit', function(code) {
    return nvcr.ejectCassette();
  });
}

debug = function() {};

module.exports.Site = Site = (function() {
  var STATUS;

  STATUS = {
    initializing: "initializing",
    ready: "ready",
    generating: "generating",
    updating: "updating"
  };

  function Site(options, callback) {
    var config_yml, e, json_config_path;
    this.status = STATUS.initializing;
    this.config = {};
    config_yml = {};
    try {
      config_yml = grunt.file.readYAML(path.resolve(options.source, '_config.yml'));
    } catch (_error) {
      e = _error;
    }
    configConvict.load(config_yml);
    if (fs.existsSync(json_config_path = path.resolve(options.source, '_config.json'))) {
      configConvict.loadFile(json_config_path);
    }
    configConvict.load(options);
    grunt.initConfig(configConvict.get());
    configConvict.load(grunt.config.get());
    configConvict.validate();
    this.config = configConvict.get();
    debug = require('debug')('mySite');
    debug("Using Config:\n " + (util.inspect(this.config)));
    this.source = this.config.source = path.resolve(this.config.source);
    if (this.config.destination != null) {
      this.destination = this.config.destination = path.resolve(this.config.destination);
    }
    this.date = new Date();
    this.dateString = this.date.toDateString();
    this.timeString = this.date.toTimeString();
    this.datasources = {};
    this.model = {};
    this.files = {};
    this.pages = {};
    this.redirects = {};
    this.proxies = {};
    this.responses = {};
    this.init(callback);
  }

  Site.prototype.init = function(callback) {
    console.time('Initialization');
    console.time('Reading');
    return this.read((function(_this) {
      return function() {
        console.timeEnd('Reading');
        return _this.cleanup(function() {
          console.timeEnd('Initialization');
          return typeof callback === "function" ? callback() : void 0;
        });
      };
    })(this));
  };

  Site.prototype.read = function(callback) {
    return this.readPages(callback);
  };

  Site.prototype.readPages = function(callback) {
    var c, e, filesFound;
    c = 0;
    e = false;
    filesFound = [];
    return __.walkDirectory(this.source, (function(_this) {
      return function(err) {
        return console.error(err);
      };
    })(this), (function(_this) {
      return function(fn) {
        c++;
        return filesFound.push(fn);
      };
    })(this), (function(_this) {
      return function() {
        pc = rc = prc = 0;
        return async.map(filesFound, _this.createFile.bind(_this), function(err, files) {
          var file, _i, _len;
          if (err != null) {
            return callback(err);
          }
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            if (!(file != null)) {
              continue;
            }
            _this.files[file.path] = file;
            _this.responses[file.url] = file;
          }
          return callback();
        });
      };
    })(this));
  };

  Site.prototype.createFile = function(fn, callback) {
    var payload;
    payload = this.getPayload();
    if (fn.match(/\.(html|htm|xml)$/)) {
      return page.createPage(this, fn, this.config.page, (function(_this) {
        return function(err, page) {
          if (err != null) {
            return callback(err);
          }
          _this.pages[page.url] = page;
          return callback(null, page);
        };
      })(this));
    } else if (fn.match(/\/\.redirect$/)) {
      return redirect.ceateRedirect(this, fn, this.config.redirect, (function(_this) {
        return function(err, redirect) {
          if (err != null) {
            return callback(err);
          }
          _this.redirects[redirect.url] = redirect;
          return callback(null, redirect);
        };
      })(this));
    } else if (fn.match(/\/\.proxy$/)) {
      return proxy.createProxy(this, fn, this.config.proxy, (function(_this) {
        return function(err, proxy) {
          if (err != null) {
            return callback(err);
          }
          _this.proxies[proxy.url] = proxy;
          return callback(null, proxy);
        };
      })(this));
    } else {
      return process.nextTick(callback);
    }
  };

  Site.prototype.removeFile = function() {};

  Site.prototype.cleanup = function(callback) {
    if (typeof callback === "function") {
      return process.nextTick(callback);
    }
  };

  Site.prototype.getPayload = function() {
    var url;
    return _.merge({}, this.config, {
      source: this.source,
      destination: this.destination,
      date: this.date,
      dateString: this.dateString,
      timeString: this.timeString,
      pages: this.pages,
      html_pages: (function() {
        var _ref, _results;
        _ref = this.pages;
        _results = [];
        for (url in _ref) {
          page = _ref[url];
          if (page.isHTML) {
            _results.push(page);
          }
        }
        return _results;
      }).call(this)
    });
  };

  Site.prototype.watch = function() {
    return console.error('watch unimplemented');
  };

  Site.prototype.serve = function(callback) {
    this.app = new app.App(this.config.server_config);
    this.app.setPageHandler(function(req, res, next) {
      var type, uri;
      uri = url.parse(req.url).pathname;
      res.removeHeader('X-Powered-By');
      if (page = this.pages[uri]) {
        type = uri.replace(/.*[\.\/]/, '').toLowerCase() || 'html';
        res.set({
          'Vary': 'Accept-Encoding',
          'Connection': 'Keep-Alive'
        });
      } else {
        return next(404);
      }
      try {
        return page.respondTo.apply(page, arguments);
      } catch (_error) {
        return next(500);
      }
    });
    this.app.configure();
    return this.app.start(function(address) {
      return typeof callback === "function" ? callback(address) : void 0;
    });
  };

  return Site;

})();

//# sourceMappingURL=mySite.map
